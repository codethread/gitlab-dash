/* eslint-disable */
// @ts-nocheck
// noinspection JSUnusedGlobalSymbols
// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.
// Import Routes
import {Route as rootRoute} from "./routes/__root"
import {Route as AuthedJobsIndexImport} from "./routes/_authed/jobs.index"
import {Route as AuthedPipesIndexImport} from "./routes/_authed/pipes.index"
import {Route as AuthedRouteImport} from "./routes/_authed/route"
import {Route as IndexImport} from "./routes/index"

// Create/Update Routes

const AuthedRouteRoute = AuthedRouteImport.update({
	id: "/_authed",
	getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
	id: "/",
	path: "/",
	getParentRoute: () => rootRoute,
} as any)

const AuthedPipesIndexRoute = AuthedPipesIndexImport.update({
	id: "/pipes/",
	path: "/pipes/",
	getParentRoute: () => AuthedRouteRoute,
} as any)

const AuthedJobsIndexRoute = AuthedJobsIndexImport.update({
	id: "/jobs/",
	path: "/jobs/",
	getParentRoute: () => AuthedRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
	interface FileRoutesByPath {
		"/": {
			id: "/"
			path: "/"
			fullPath: "/"
			preLoaderRoute: typeof IndexImport
			parentRoute: typeof rootRoute
		}
		"/_authed": {
			id: "/_authed"
			path: ""
			fullPath: ""
			preLoaderRoute: typeof AuthedRouteImport
			parentRoute: typeof rootRoute
		}
		"/_authed/jobs/": {
			id: "/_authed/jobs/"
			path: "/jobs"
			fullPath: "/jobs"
			preLoaderRoute: typeof AuthedJobsIndexImport
			parentRoute: typeof AuthedRouteImport
		}
		"/_authed/pipes/": {
			id: "/_authed/pipes/"
			path: "/pipes"
			fullPath: "/pipes"
			preLoaderRoute: typeof AuthedPipesIndexImport
			parentRoute: typeof AuthedRouteImport
		}
	}
}

// Create and export the route tree

interface AuthedRouteRouteChildren {
	AuthedJobsIndexRoute: typeof AuthedJobsIndexRoute
	AuthedPipesIndexRoute: typeof AuthedPipesIndexRoute
}

const AuthedRouteRouteChildren: AuthedRouteRouteChildren = {
	AuthedJobsIndexRoute: AuthedJobsIndexRoute,
	AuthedPipesIndexRoute: AuthedPipesIndexRoute,
}

const AuthedRouteRouteWithChildren = AuthedRouteRoute._addFileChildren(AuthedRouteRouteChildren)

export interface FileRoutesByFullPath {
	"/": typeof IndexRoute
	"": typeof AuthedRouteRouteWithChildren
	"/jobs": typeof AuthedJobsIndexRoute
	"/pipes": typeof AuthedPipesIndexRoute
}

export interface FileRoutesByTo {
	"/": typeof IndexRoute
	"": typeof AuthedRouteRouteWithChildren
	"/jobs": typeof AuthedJobsIndexRoute
	"/pipes": typeof AuthedPipesIndexRoute
}

export interface FileRoutesById {
	__root__: typeof rootRoute
	"/": typeof IndexRoute
	"/_authed": typeof AuthedRouteRouteWithChildren
	"/_authed/jobs/": typeof AuthedJobsIndexRoute
	"/_authed/pipes/": typeof AuthedPipesIndexRoute
}

export interface FileRouteTypes {
	fileRoutesByFullPath: FileRoutesByFullPath
	fullPaths: "/" | "" | "/jobs" | "/pipes"
	fileRoutesByTo: FileRoutesByTo
	to: "/" | "" | "/jobs" | "/pipes"
	id: "__root__" | "/" | "/_authed" | "/_authed/jobs/" | "/_authed/pipes/"
	fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
	IndexRoute: typeof IndexRoute
	AuthedRouteRoute: typeof AuthedRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
	IndexRoute: IndexRoute,
	AuthedRouteRoute: AuthedRouteRouteWithChildren,
}

export const routeTree = rootRoute._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authed"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authed": {
      "filePath": "_authed/route.tsx",
      "children": [
        "/_authed/jobs/",
        "/_authed/pipes/"
      ]
    },
    "/_authed/jobs/": {
      "filePath": "_authed/jobs.index.tsx",
      "parent": "/_authed"
    },
    "/_authed/pipes/": {
      "filePath": "_authed/pipes.index.tsx",
      "parent": "/_authed"
    }
  }
}
ROUTE_MANIFEST_END */
